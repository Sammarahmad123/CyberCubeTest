package api.functional;

import api.user.UserRequests;
import dto.user.UserDTO;
import enums.StatusCode;
import io.restassured.response.Response;

import java.util.Arrays;

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class UserFunctionalTest {

	@Test(groups = { "TC01", "functional" })
	public void TC01_createUserWithList() {
		UserDTO user1 = UserDTO.builder()
				.id(0L) // ID is typically generated by the server, so it can be set to 0 or null if not required.
				.username("user1")
				.firstName("FirstName1")
				.lastName("LastName1")
				.email("user1@example.com")
				.password("password1")
				.phone("1234567890")
				.userStatus(1)
				.build();

		UserDTO user2 = UserDTO.builder()
				.id(0L)
				.username("user2")
				.firstName("FirstName2")
				.lastName("LastName2")
				.email("user2@example.com")
				.password("password2")
				.phone("0987654321")
				.userStatus(1)
				.build();

		Response response = UserRequests.createUserWithList(Arrays.asList(user1, user2), StatusCode.OK);
		Assert.assertEquals(response.jsonPath().getString("message"), "ok");
	}

	@DataProvider(name = "userDataProvider")
	public Object[][] createUserData() {
		return new Object[][] {
				{ "user1" },
		};
	}

	@Test(groups = { "TC02", "functional" }, dataProvider = "userDataProvider")
	public void TC02_getUserByUsername(String username) {
		Response response = UserRequests.getUserByUsername(username, StatusCode.OK);
		Assert.assertEquals(response.getStatusCode(), 200);
		UserDTO retrievedUser = response.as(UserDTO.class);
		Assert.assertEquals(retrievedUser.getUsername(), username, "The username in the response does not match the expected value.");
	}

	//	@Test(groups = {"TC03", "functional"})
	//	public void TC03_createAndUpdateUser() {
	//		// Step 1: Create a new user
	//		UserDTO newUser = UserDTO.builder()
	//				.username("newUser")
	//				.firstName("FirstName")
	//				.lastName("LastName")
	//				.email("newuser@example.com")
	//				.password("password123")
	//				.phone("1234567890")
	//				.userStatus(1)
	//				.build();
	//
	//		Response createResponse = UserRequests.createUserWithList(Arrays.asList(newUser), StatusCode.OK);
	//		Assert.assertEquals(createResponse.getStatusCode(), 200, "User should be created successfully.");
	//
	//		// Extracting user ID if necessary, assuming API returns it, or using username if ID isn't used
	//		String username = newUser.getUsername();  // If the username is enough to identify the user
	//
	//		// Step 2: Update the user
	//		UserDTO updatedUser = UserDTO.builder()
	//				.username(username)  // Use the same username for identification
	//				.firstName("UpdatedFirstName")
	//				.lastName("UpdatedLastName")
	//				.email("updateduser@example.com")
	//				.password("newpassword")
	//				.phone("9876543210")
	//				.userStatus(1)
	//				.build();
	//
	//		Response updateResponse = UserRequests.updateUserByUsername(username, updatedUser, StatusCode.OK);
	//		Assert.assertEquals(updateResponse.getStatusCode(), 200, "User should be updated successfully.");
	//
	//		// Step 3: Retrieve the updated user details to verify the update
	//		Response getResponse = UserRequests.getUserByUsername(username, StatusCode.OK);
	//		UserDTO retrievedUser = getResponse.as(UserDTO.class);
	//
	//		// Assert that the retrieved user details match the updated user details
	//		Assert.assertEquals(retrievedUser.getFirstName(), updatedUser.getFirstName(), "First name should match the updated value.");
	//		Assert.assertEquals(retrievedUser.getLastName(), updatedUser.getLastName(), "Last name should match the updated value.");
	//		Assert.assertEquals(retrievedUser.getEmail(), updatedUser.getEmail(), "Email should match the updated value.");
	//	}

	@Test(groups = { "TC04", "functional" })
	public void TC04_deleteUserByKnownUsername() {
		UserDTO newUser = UserDTO.builder()
				.username("deleteTestUser")
				.firstName("Deletable")
				.lastName("User")
				.email("deleteuser@example.com")
				.password("password123")
				.phone("1234567890")
				.userStatus(1)
				.build();

		Response createResponse = UserRequests.createUserWithList(Arrays.asList(newUser), StatusCode.OK);
		Assert.assertEquals(createResponse.getStatusCode(), 200, "User should be created successfully.");

		Response deleteResponse = UserRequests.deleteUserByUsername(newUser.getUsername(), StatusCode.OK);
		Assert.assertEquals(deleteResponse.getStatusCode(), 200, "User should be deleted successfully.");

		Response getResponse = UserRequests.getUserByUsername(newUser.getUsername(), StatusCode.NOT_FOUND);
		Assert.assertEquals(getResponse.getStatusCode(), 404, "User should not be found after deletion.");
	}

	@Test(groups = { "TC05", "functional" })
	public void TC05_loginUser() {
		String username = "testUser";
		String password = "testPass123";

		Response response = UserRequests.loginUser(username, password, StatusCode.OK);
		Assert.assertEquals(response.getStatusCode(), 200, "Login should be successful.");

		String loginConfirmation = response.getBody().asString();
		Assert.assertTrue(loginConfirmation.contains("logged in user session"), "Login confirmation message should be present.");
	}

	@Test(groups = { "TC06", "functional" })
	public void TC06_logoutUser() {
		Response loginResponse = UserRequests.loginUser("testUser", "testPass123", StatusCode.OK);
		Assert.assertEquals(loginResponse.getStatusCode(), 200, "Login should be successful.");

		Response logoutResponse = UserRequests.logoutUser(StatusCode.OK);
		Assert.assertEquals(logoutResponse.getStatusCode(), 200, "Logout should be successful.");

		String logoutConfirmation = logoutResponse.getBody().asString();
		Assert.assertTrue(logoutConfirmation.contains("ok"), "Logout confirmation message should be present.");
	}

	@Test(groups = { "TC07", "functional" })
	public void TC08_createUser() {
		UserDTO newUser = UserDTO.builder()
				.username("newUsername")
				.firstName("New")
				.lastName("User")
				.email("newuser@example.com")
				.password("newUser123")
				.phone("1234567890")
				.userStatus(1)
				.build();

		Response response = UserRequests.createUser(newUser, StatusCode.OK);
		Assert.assertEquals(response.getStatusCode(), 200, "User should be created successfully.");
	}
}
