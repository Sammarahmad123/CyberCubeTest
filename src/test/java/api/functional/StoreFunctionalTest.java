package api.functional;

import static api.utils.Generator.generateRandomId;

import static org.testng.AssertJUnit.assertEquals;

import api.pet.PetRequests;
import api.store.StoreRequests;
import dto.order.OrderDTO;
import dto.pet.CategoryDTO;
import dto.pet.PetDTO;
import enums.StatusCode;
import io.restassured.response.Response;

import java.util.Collections;
import java.util.Map;

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class StoreFunctionalTest {

	@Test(groups = { "TC01", "functional" })
	public void TC01_testGetInventoryByStatus() {
		Response response = StoreRequests.getInventory(StatusCode.OK);
		Assert.assertEquals(response.getStatusCode(), StatusCode.OK.getCode());

		Map<String, Integer> inventory = response.jsonPath().getMap("$", String.class, Integer.class);

		// Assert that the response contains the expected status keys with inventory count greater than a threshold
		Assert.assertTrue(inventory.containsKey("available") && inventory.get("available") > 0);
		Assert.assertTrue(inventory.containsKey("pending") && inventory.get("pending") > 0);
		Assert.assertTrue(inventory.containsKey("sold") && inventory.get("sold") > 0);

		// Optionally, check that the inventory counts are greater than a certain threshold, if needed
		int threshold = 10; // Define your threshold value here
		Assert.assertTrue(inventory.get("available") > threshold, "The count of 'available' should be greater than " + threshold);
		Assert.assertTrue(inventory.get("pending") > threshold, "The count of 'pending' should be greater than " + threshold);
		Assert.assertTrue(inventory.get("sold") > threshold, "The count of 'sold' should be greater than " + threshold);
	}

	@DataProvider(name = "createPetAndOrderData")
	public Object[][] createPetAndOrderData() {
		// Create a new pet
		CategoryDTO category = CategoryDTO.builder().id(0).name("Dogs").build();
		PetDTO pet = PetDTO.builder()
				.id(generateRandomId()) // Assuming the ID is auto-generated by the system
				.category(category)
				.name("Doggie")
				.photoUrls(Collections.singletonList("url"))
				.tags(Collections.emptyList())
				.status("available")
				.build();

		Response petResponse = PetRequests.addPet(pet, StatusCode.OK);
		PetDTO createdPet = petResponse.as(PetDTO.class);

		// Create order details using the ID of the created pet
		OrderDTO order = OrderDTO.builder()
				.petId(createdPet.getId())
				.quantity(1)
				.status("placed")
				.complete(true)
				.build();

		return new Object[][] { { createdPet, order } };
	}

	@Test(dataProvider = "createPetAndOrderData", groups = { "TC02", "functional" })
	public void TC02_testPlaceOrderForAPet(PetDTO createdPet, OrderDTO order) {
		Response orderResponse = StoreRequests.placeOrder(order, StatusCode.OK);
		OrderDTO createdOrder = orderResponse.as(OrderDTO.class);

		// Verify the response
		assertEquals(orderResponse.getStatusCode(), StatusCode.OK.getCode());
		assertEquals(createdOrder.getPetId(), createdPet.getId());
		assertEquals(createdOrder.getQuantity(), order.getQuantity());
		assertEquals(createdOrder.isComplete(), order.isComplete());
		assertEquals(createdOrder.getStatus(), order.getStatus());
	}

	@Test(groups = { "TC04", "functional" })
	public void TC04_testFindPurchaseOrderByValidID() {
		OrderDTO newOrder = OrderDTO.builder()
				.petId(generateRandomId())
				.quantity(1)
				.status("placed")
				.complete(true)
				.build();

		Response createResponse = StoreRequests.placeOrder(newOrder, StatusCode.OK);
		Assert.assertEquals(createResponse.getStatusCode(), 200);

		OrderDTO createdOrder = createResponse.as(OrderDTO.class);
		long orderId = createdOrder.getId();

		Response getOrderResponse = StoreRequests.getOrderById(orderId, StatusCode.OK);
		Assert.assertEquals(getOrderResponse.getStatusCode(), 200);

		OrderDTO retrievedOrder = getOrderResponse.as(OrderDTO.class);
		Assert.assertEquals(retrievedOrder.getId(), orderId, "The retrieved order ID should match the created order ID.");
	}

	@Test(groups = { "TC07", "functional" })
	public void TC07_testDeletePurchaseOrderByValidID() {
		OrderDTO newOrder = OrderDTO.builder()
				.petId(generateRandomId())
				.quantity(1)
				.status("placed")
				.complete(true)
				.build();

		Response createResponse = StoreRequests.placeOrder(newOrder, StatusCode.OK);
		Assert.assertEquals(createResponse.getStatusCode(), 200);

		long orderId = createResponse.jsonPath().getLong("id");

		Response deleteResponse = StoreRequests.deleteOrderById(orderId, StatusCode.OK);
		Assert.assertEquals(deleteResponse.getStatusCode(), 200);

		Response checkDeletedResponse = StoreRequests.getOrderById(orderId, StatusCode.NOT_FOUND);
		Assert.assertEquals(checkDeletedResponse.getStatusCode(), 404);
	}
}
